

SOLID
Single responsibility : a class should have a single responsibility (tear down components).                                                                                
Open closed : classes should be open for extension but closed to modification (like a button can take an icon prop from outside).    
Liscov substitution : subtypes should be able to do what super types do (search input which uses the default input should pass all the props to it)                                                                                                         
Interface segregation :  Clients should not be forced to depend on methods that they do not use ( components should not depend on the props the don’t use)                                                                    
Dependency inversion: entities should depend upon abstractions (pass functions for submitting)

Browser engine
JavaScript is not understandable by computer but the only browser understands JavaScript.A JavaScript engine is a computer program that executes JavaScript code and converts it into computer understandable language.
Chrome v8 is C++ program - Firefox spider monkey

v8 :
	•	Heap memory allocation
	•	Call stack execution context

single thread
The JavaScript engine is single threaded this means any statements you run will be executed one after the other in a single process. To avoid blocking calls and waiting while sth is being computed it utilizes an event loop.

non-blocking
slow processes don’t block its execution

concurrent
it executes its code in more than one thread at the same time

asynchronous
the code runs in an event loop. When there is a blocking operation, the event is started. The blocking code keeps running without blocking the main execution thread. When the blocking code finishes running, it queue’s the result of the blocking operations and pushes them back to the stack.

Web API
Events, timers, Ajax requests are all provided on the client-side by the browsers and are often referred to as Web API
This is where code that isn’t handled by the V8 engine is executed to not “block” the main execution thread.

JS event loop
callstack - heap(v8) - web apis - callback queue
monitors the Call Stack and the Callback Queue (message queue)  waits for the Call Stack to be clear before pushing callbacks from the callback Queue to the Call Stack
every function call makes a stack frame created and pushes it to callstack  so When the Call Stack encounters a web API function, the process is immediately handed over to the Web API freeing the Call Stack to perform other operations during its execution, tasks that have been executed by the Web API’s,  are being pushed to the Task Queue, so when the callstack is empty first message in queue is out and goes to callstack

Asynchronous calls
javascript techniques to avoid blocking code handle asynchronous operation

callbacks(Callbacks allow you to provide a function to be executed after the asynchronous code has finished) - promise(when chaining a number of function calls together it can become increasingly difficult to follow the flow of execution. Promises aim to solve this issue by allowing you to chain together promises using the .then() syntax. , error handling with .catch() - async await(cleaner - es6 error handling with try catch)
callbacks - funcs that are used an an argument to another func
Promise -  new Promise((resolve, reject) => {if() reject() else resolve()}) - pending fulfilled rejected settled -resolve is called when the promise is fulfilled reject when its rejected -  used with then and catch - use then and catch to consume promise  - then access the result when the promise is fulfilled and catch access the result/error when the promise is rejected
Object prototypes
all obj inherit properties from a prototype like array obj inherit from array prototype on top the chain is Object.prototypes which all prototypes inherit from it - A prototype is a blueprint of an object. The prototype allows us to use properties and methods on an object even if the properties and methods do not exist on the current object. Like arr.push

Constructor func
Classes - new way
used to create obj with similar properties and methods
function Student(name){
this.name = name;
}
Student.prototype.getDetails = function(){
return 'Name: ${this.name}';
}
let student1 = new Student("Vivek");
// ES6 version classes
class Student{
constructor(name){
this.name = name;
}
// Methods can be directly added inside the class
getDetails(){
return 'Name: ${this.name}';
}
}

Scope
determines the accessibility of variables and functions - global (can be accessed from anywhere in the code), local or function(they cannot be accessed from outside of the scope), block

Hoisting
where all the variable and function declarations are moved on top of the scope. The scope can be both local and global.

Var let const
•var - global and local scope  -  Variables declared with var keyword do not have block scope. It means a variable declared in block scope {} with the var keyword is the same as declaring the variable in the global scope.
   •let and const(block scope and local)) - const is readonly -  let and const are hoisted but unlike var are not initialized with default value - temporal dead zone is when you try to access a variable before it is initialized - ex of hoisting: var undefined and let reference error because with let it is not initialized with undefined

Closure
declaring a func in another func
ability of a function to remember the variables and functions that are declared in its outer scope - when func stores a variable for further references instead of destroying it after execution

Data types
( primitive are passed by values and compared by values - string number bigint boolean undefined null(typeof obj) symbol) , 
(none primitive are passed by reference and compared by reference - obj based - obj array function)
	•	Primitive data types can store only a single value. To store multiple and complex values, non-primitive data types are used.
	•	Any data type that is not primitive is of object type - typeof [1,2,3] is obj
	•	ex: Var y =  234 , var z = y : In the above example, the assign operator knows that the value assigned to y is a primitive type ( allocates some space in the memory, stores the value “234” and returns the location of the allocated memory space. Therefore, the variable y points to the location of the memory space), so when the second line code executes, where the value of y is assigned to z, the assign operator takes the value of y (234) and allocates a new space in the memory and returns the address. Therefore, variable z is not pointing to the location of variable y, instead, it is pointing to a new location in the memory.
	•	ex: 
	•	var obj = { name: "Vivek", surname: "Bisht" };
	•	var obj2 = obj;
	•	The reference of the obj is passed to obj2 both pointing to same address                                                                                                 
a = 1 , b = 1 , a===b ? true.                                                                           
a = { “name”: “Sara”} , b = { “name”: “Sara”}, a===b ? false ,
c = a, c===a ? true both pointing to the same address if c changes a changes


IIFE
•	immediately invoked func - func that is called as soon as it is defined
	•	(function() { })()

dynamically typed language
type of a variable is checked during run-time - variables have no types and values have types,

Implicit Type Coercion
•	 automatic conversion of value from one data type to another - with + number is converted to string then concats -  3 + 5 + “7” = “87”, with - string is converted to number 3 - “3” = 0
	•	Truthy values are those which will be converted (coerced) to true. Falsy values are those which will be converted to false.
	•	All values except false, 0, 0n, -0, “”, null, undefined, and NaN are truthy values.
	•	OR ( | | ) operator - returns the first truthy value
	•	AND ( && ) operator -  if all values are truthy returns last one    if one is falsy returns the first falsy 
	•	The ‘==’ operator, converts both the operands to the same type and then compares them.

NaN
represents not a number -typeof NAN will return number -check value is NaN isNaN(‘hello’) converts it to number -  Number.isNaN(‘hello’)  -
Object.is()  - determins whether two values are the same value

This
this refers to the obj that the function is a property of(context which func is called) - if its the global context it refer to global object in browser is window obj  - in arrow func refers to the lexical surrounding scope
whenever the function is invoked, check the object before the dot. The value of this . keyword will always be the object before the dot.

call vs apply vs bind
call() method allows an object to use the method of another object. -
apply() is similar to call call() method takes arguments separately whereas, apply() method takes arguments as an array. -
bind() returns a new function, where the value of “this” keyword will be bound to the owner object, which is provided as a parameter.

Rest operator
func(…arg){ return arg[1]} takes a variable number of arguments and returns them as array

Spread operator
spreads obj or array literals , [...arr, b]

charAt()
retrieve a character based on index - 0 to n - 1 with n length

Find vs findIndex
return element vs return element index

exec() - test()
exec - searches string for a pattern returns pattern if finds it returns empty if not
test - searches string for a pattern returns true if finds it returns false if not

Function generator
function* that can be exited and reentered -when called returns generator obj - gen.next() runs the body until the first yield
genFunc().next(); // Returns {value: 3, done:false}

Local storage - session storage - cookie
stored on the user’s browser
Cookies are primarily for server-side reading (can also be read on client-side), localStorage and sessionStorage can only be read on client-side.
For most cases, we use the localStorage object if we want some data to be on the browser. If we want it on the server, then we use cookies, and the sessionStorage is used when we want to destroy the data whenever that specific tab gets closed or the season is closed by the user
cookies are sent with requests to the server and are sent to the client on response - cookie is less than 4kb

Error types
syntax - logical

Recursion
iterate over an operation by having a func call itself until it arrives at a result

BOM
browser object model user interacts with the browser - initial obj is window - window.location history navigator screen doc

set - map
•	set - a collection of unique and ordered data - weakset is also that but only stores data of type obj and and if there is no reference to obj it will be garbage collected and only has add delete and has methods
const newSet = new Set([4, 5, 6, 7]);
console.log(newSet);// Outputs Set {4,5,6,7}
const newSet2 = new WeakSet([3, 4, 5]); //Throws an error
let obj1 = {message:"Hello world"};
const newSet3 = new WeakSet([obj1]);
console.log(newSet3.has(obj1)); // true

	•	map - stores key value pairs - same as top
const map1 = new Map();
map1.set('Value', 1);
const map2 = new WeakMap();
map2.set('Value', 2.3); // Throws an error
let obj = {name:"Vivek"};
const map3 = new WeakMap();
map3.set(obj, {age:23});

Deep copy
A deep copy of an object is a copy whose properties do not share the same references                                                
JSON.parse(JSON.stringify(obj)).                                                    
Object.assign({}, obj);
The map, filter and reduce methods also introduced in ES6 will also help you create deep copy of an array                                                                         
spread operator - deep copy of top data and shallow of nested.                            
a = [1,2] , b = […a]  if data is not nested -                                                            
what happens is that for none primitive data types they are passed by reference so if we say b = a, b is pointing to the same address in memory so if we change b, a will be changed to in order to prevent this we should deep copy objects with these methods to allocate a new space in memory for them



React lifecycle
each component has a lifecycle which u can monitor manipulate it - mount - update - unmount
	•	Mount four method that gets called - constructor(props)(setup initial state and values - super(props)) - getderivedstatefromprops(props, state)(set state base on initial props) - render(outputs html to Dom) - componentdidmount(after the component is rendered - statements that requires the component in Dom)
	•	Updating change in the state or props - getDerivedStateFromProps() shouldComponentUpdate() render() getSnapshotBeforeUpdate() componentDidUpdate()
	•	Unmount componentwillunmount

Deprecated lifecycles - componentWillMount,componentWillReceiveProps, componentWillUpdate

state and props
•	state - each component in react has a built in state obj which holds all the property values - mutable
	•	props - input for components used for passing data from parent to child - Immutable

JSX
JSX stands for JavaScript XML. It allows us to write HTML inside JavaScript and place them in the DOM without using functions like appendChild( ) or createElement( ).

virtual DOM
React creates a lightweight copy of the actual Dom known as virtual Dom when a component updates react rerenders the virtual Dom creating a new presentation of the ui then with a diffing algorithm compares the previous virtual Dom with the updated one to identify the minimal number of changes needed. react renders only those objects inside the real DOM instead of rendering the complete real DOM

Hooks
bring state and lifecycle features to functional components
must be called only at the top level are not allowed to be called inside loops, nested functions or conditions
	•	useCallback(returns memoized func) useful while passing callbacks into the optimized child 
	•	useMemo(returns memoized value) - 
	•	useRef(allows you to persist value between rerenders u can store a mutable value that won’t cause rerenders when its updated) It can be used to access a DOM element directly.
	•	useImperativeHandle - lets you modify the ref instance that is exposed from parent to child
	•	useContext - creating common data that is to be accessed by the components hierarchy without having to pass the props down to each level.

create useCallback with useRef and check dependencies with useEffect

custom hooks
functions start with "use" which call other hooks
reuse stateful logic they avoid multiple layers of abstraction or wrapper

Memoization
caching value so that it does not need to be recalculated

Ref ? forward-Ref?
•	ref - access dom elements
	•	forward-ref - allows parent components to move down (or “forward”) refs to their children. ForwardRef gives a child component a reference to a DOM entity created by its parent component

HOC - HOF
share logic across app
	•	hoc - is a function that takes in a component and returns a new component with additional functionalities
	•	hof - (functions that operate on other function either by taking them as argument or returning them)

SPA
is a web app implementation that loads only a single web document, and then updates the body content of that single document via JavaScript APIs , Javascript files house all of the data  logic, UI, and communication with the server, When users are navigating through the various parts of the SPA, there will not be any additional loading time .
 The server renders a blank page with a script tag pointing at the app’s bundle. The blank page is sent to the client browser, which starts to run the app, compile everything, and then makes whatever API calls it needs to and renders the contents of the page.

SSR
API call changes in ssr - rendering occurs on the server and the html is sent to the client browser. When content is requested on the client, data is fetched from a database or CMS as the user navigates the page.

Debounce - throttle
force a func to wait a certain amount of time before calling again
For example, if we debounce a scroll function with a timer of 250ms the function is only called if the user hasn’t scrolled in 250ms. If we throttle a scroll function with a timer of 250ms, the function is called every 250ms while the user is scrolling.
function debounce(func, timeout = 300){
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => { func.apply(this, args); }, timeout);
  };
}
function saveInput(){
  console.log('Saving data');
}
const processChange = debounce(() => saveInput());

Memory leak
a result of not cancelling subscriptions made when a component was mounted before the component gets unmounted

Redux
•	Components are given callback functions as props, which they call whenever a UI event happens.
	•	Those callbacks create and dispatch actions based on the event.
	•	Reducers process the actions, computing the new state.
	•	The new state of the whole application goes into a single store.
	•	Components receive the new state as props and re-render themselves where needed.

redux thunk
is a middleware that allows you to create actionCreators functions that return function instead of actions the returned func has access to getState and dispatch
you can do asynchronous operation there
simple actions return plain objects with type and payload property

useSelector
useDispatch
•	allows you to extract data from redux store
•	returns stores dispatch method

Map vs foreach
provide a func on each element
map creates new array and mutates it
foreach mutates the same array

PWA cache strategies
service workers script that browser runs in the background - cache first then network

utils and service
utils are stateless. They're usually utility functions, but sometimes you put constants and enums in there too. services are like utils but are allowed to hold states.

implement multi theme
with css attributes body[data-theme="dark-theme"] {} 

implement multi language
react-i18next

improve performance
avoid inline func definitions(since func is obj in js the inline func will always fail the prop diffs and arrow func will always create new instance on every render so much work for garbage collector)
- throttle and debouncing  -
using immutable data structures -
use react.fragment o r <> to avoid extra wrappers - 
avoid using index as key for map

reduce renders
any changes to state and props cause rerenders
any changes to parent cause child to rerender
use shouldcomponentupdate
use memoization
PureComponent
moving the state as close to where you need
Lazy Loading - reduce the load time of a React app
memoization is only useful when the child component is in React.memo and all its props are wrapped in usecallbacks and usememos

lazy loading
prevents the entire app from loading at once instead the element crucial to the UI will load first the less important one will load later
lazy() : dynamic import
suspense : show fallback content while waiting for the lazy component to get loaded
const Heavy = lazy(() => import(''))
return (
<Suspense fallback={<div>Loading...</div>}>
<Heavy>
</Suspense>                                                                                              
 next/dynamic
import dynamic from 'next/dynamic'                                                      const ComponentA = dynamic(() => import('../components/A'))

bundle size
•	tree shaking  Tree Shaking is a concept in development of eliminating dead code or unused code from js bundle
	•	code splitting  use lazy loading to put some components into other bundle files rather than the main bundle file to reduce it's size
	•	lazy loading

side effects
useEffect Hook allows you to perform side effects in your components(its after the component is rendered).and then clean them up depending on their kind
	•	effects without clean up - network reqs
	•	effects with clean up -.setInterval wont stop unless we use clearInterval - subscriptions need to be turned of when we are no longer using them

interceptors
default configurations that are added automatically to every request or response

controlled and uncontrolled components
different approches to handle input
	•	controlled component, - the value of the input element is controlled by React with event handler like onChange getting triggered and storing value in state
	•	uncontrolled component, the value of the input element is handled by the DOM itself. access value using ref

prop drilling
passing props from parent to deeply nested childs in a way that component that should not be aware of that data have access to it

error boundaries
any error inside the render method leads to unmounting of the component so we see a blank page instead of error, error boundaries provide a way  to catch errors that occur in the render phase.
class ErrorBoundary extends React.Component {
constructor(props) {
super(props);
this.state = { hasError: false };
}
static getDerivedStateFromError(error) {
return { hasError: true };
}
componentDidCatch(error, errorInfo) {
logErrorToMyService(error, errorInfo);
}
render() {
if (this.state.hasError) {
return <h4>Something went wrong</h4>
}
return this.props.children;
}
}

getDerivedStateFromError function renders the fallback UI interface
componentDidCatch logs the error information to an error tracking service.
<ErrorBoundary>
<CounterComponent/>
</ErrorBoundary>

TDD - BDD
•	is a software development practice that focuses on creating unit test cases before developing the actual code
	•	an Agile software development methodology in which an application is documented and designed around the behavior a user expects to experience when interacting with it

Redux toolkit caching
RTK Query is an advanced data fetching and caching tool,

infinite scroll
use virtualization method with intersection observer you can observe and unmount components that are not in the view
Palindrome
Repeated

GIT
Git revert - Instead of deleting or orphaning commits in the commit history, a revert will create a new commit that inverses the changes specified
Git reset - used to undo local changes to the state of a Git repo
Git reflog 
Git log 
Git bisect  - This command uses a binary search algorithm to find which commit in your project's history introduced a bug. You use it by first telling it a "bad" commit that is known to contain the bug, and a "good" commit that is known to be before the bug was introduced.
git rebase - Rebasing is the process of moving or combining a sequence of commits to a new base commit.
CI/CD
Continuous Integration (CI) is a development practice that helps ensure that software components work together. Continuous delivery (CD) is the ability to deploy your integrated code into production without the need for human intervention.
config.yml
dockerw

Webpack
Webpack is a free and open-source module bundler for JavaScript. It is made primarily for JavaScript, but it can transform front-end assets such as HTML, CSS, and images if the corresponding loaders are included. It takes disparate dependencies, creates modules for them and bundles the entire network up into manageable output files.(modules are made of chunks)

Docker
Docker is an open platform for developing, shipping, and running applications , add a docker file to dockerize your app, this file has the instructions to package your app into a docker image  this image has light os, runtime env and env variable and libraries to provide a an isolated env and then docker uses this image to start a container(a process).

An example: a website, API and database have to be connected together. This is what Docker Compose allows us to do. We can create a file that defines how containers are connected with one another. We can use this file to instantiate all of the Dockerfiles for all of our containers all at once!



	•	Use Docker to run your code on your laptop in the same environment as you have on your server (try the building tool)
	•	Use Docker whenever your app needs to go through multiple phases of development (dev/test/qa/prod, try Drone or Shippable, both do Docker CI/CD)

Pm2
PM2 is a process manager for Node.js applications. It allows you to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.

Kuberneties
is a container orchestration tool, every service deployed in kuberneties is called a pod and it can be in different environments these environments are called namespaces - kubectl get pods -n staging - kubectl logs -f example -n staging - kubectl rollout restart example
static/dynamic websites
A static website is delivered to a user exactly the way it's stored. That means that nothing on the page will change by the user or even the site administrator.A static website is one with stable content, where every user sees the exact same thing on each individual page. On the other hand, a dynamic website is one where content is pulled on-the-fly, allowing its content to change with the user. resume websites, portfolio websites, brochure websites, one-off landing pages, and other informational or read-only sites.



Typescript

TypeScript is an object-oriented and statically typed language

generics
being able to create a component that can work over a variety of types rather than a single one
<T>, where T represents a passed-in type -
function identity<Type>(arg: Type): Type {
return arg;
}

any type
store a value in a variable but don’t know the type of that variable

void
absence of type on a variable
If a variable is of type void, you can only assign the null or undefined values to it

null
absence of value. A null variable doesn’t point to any object. Hence you cannot access any properties on the variable or call a method on it.

undefined
When a variable is declared without initialization, it’s assigned the undefined value

never
represents the type of values that never occur
A function that doesn't return a value(void) implicitly returns the value undefined in JavaScript In contrast, a function that has a never return type never returns. It doesn't return undefined, either
ex: In an unending loop e.g a while(true){} type loop.
	1	A function that throws an error e.g function foo(){throw new Exception('Error message')}

enum
create named constants
start numbering at 0
enum Team {
Alpha,
Beta,
Gamma,
Delta
}
let t: Team = Team.Delta;

enum Author {
Anders = "Anders",
Hejlsberg = "Hejlsberg"
};

Function overloading
allows us to define multiple functions with the same name, as long as their number of parameters or the types of parameters are different.

type inference
know the type when you don’t provide an explicit type happens when the variables or parameters are initialized during the declaration

noImplicitAny
when we don’t provide any type on a variable, TypeScript assumes ‘any’ type

interface
interface defines a contract by specifying the type of data an object can have and its operations.

member visibility
•	public - anywhere outside the class
	•	protected - visible only to the subclasses (extend)
	•	private - only visible inside the class

abstract classes
An abstract class marks one or more of its members as abstract and it can not be instantiated(create obj). Any classes that extend an abstract class have to provide an implementation for the abstract members of the superclass.
polymorphism
utilizes inheritance for reusing methods multiple times with different behavior depending on class type, a method in parent class can be reimplemented in extended class

union
indicates that a value can be one of several types. A vertical bar (|) separates these types.

intersection
combine the members of two or more types by using the ‘&’ operator
interface Employee {
work: () => string;
}

interface Manager {
manage: () => string;
}

type Supervisor = Employee & Manager;

tuple
They are similar to arrays with a fixed number of elements with a known type
let values: [string, number] = ["Foo", 15];

destructure
let employeeRecord: [string, number] = ["John Doe", 50000];
let [emp_name, emp_salary] = employeeRecord;
type assertions
let the TypeScript compiler know the type of the variable.  

let value: unknown = "Foo";
let len: number = (value as string).length;

let value: unknown = "Foo";
let len: number = (<string>value).length;

strictNullChecks
added in tsconfig.json to check for null pointers

readonly
make obj properties immutable readonly x: number;

type declaration
A type declaration file is a text file ending with a .d.ts extension providing type declaration

in
The in operator is used to find if a property is in the specified object. It returns true if the property belongs to the object. Otherwise, it returns false.

implements
check that a class satisfies the contract specified by an interface

inheritance
allows a class to extend another class and reuse and modify the behavior - keyword ‘extends’
string literal
you can refer to specific strings and numbers as types
greeting: "hi" | "hello" | "hola"

template literal
You can combine them with concrete, literal types to produce a new string literal type.

type Color = "green" | "yellow";
type Quantity = "five" | "six";

// type ItemTwo = "five item" | "six item" | "green item" | "yellow item"
type ItemOne = `${Quantity | Color} item`;

conditional types
C extends B ? TypeX : TypeY

utility types
•	Partial<Type> - all properties of Type set to optional.
	•	Required<Type> - all properties of Type set to required.
	•	Readonly<Type>   - all properties of Type set to readonly.
	•	Record<Keys, Type> - Constructs an object type with property keys are of type Keys, and values are Type.   •omit






image: object-fit = cover: cropped to fill the entire parent container and preserve the aspect ratio
				 contain: letterboxed to fit within the parent container and preserve the aspect ratio
				 fill: stretched to fill the entire parent container and preserve the aspect ratio



Semantic tag - presentation and meaning, describe the purpose of the elemen (article - p - header - nav - footer - main)

CSS - strong selectors - rem em scales based on root and based on parent - vw vh 1% of the viewport  - % relative to parent - variables: set - - white: #fff access var(- - white) - mixing: @mixin name($var) {} @include name
Pseudo classes :hover certain state of element -  pseudo element ::first-line certain part of element
div + p. Selects the first <p> element that is placed immediately after <div> elements
p ~ ul  Selects every <ul> element that is preceded by a <p> element
Selectors weight category id 1-0-0 , class pseudo class 0-1-0 , element pseudo element 0-0-1
Align-items position flexitems along cross axis - align-content position flex lines along cross axis use with flex-wrap: wrap
White-space - column-count
Position - Static positioned elements are not affected by the top, bottom, left, and right properties.
position: relative; is positioned relative to its normal position.
position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. 
position: absolute; is positioned relative to the nearest positioned ancestor if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.
position: sticky; is positioned based on the user's scroll position. A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).



for each test we want to render out react tree to a dom element that's attached to doc and clean it

beforeEach
afterEach

it - act - expect - mock - jest.fn()
